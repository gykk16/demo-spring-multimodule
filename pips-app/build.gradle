plugins {
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
}

bootJar { enabled = true }
jar { enabled = true }

// ================================================================================================================
// application.yml 읽어오기
// ================================================================================================================
Properties properties = new Properties()
def appVer = "0.0.1"

new FileInputStream(project.file('src/main/resources/application.yml')).withCloseable { stream ->
    properties.load(stream)
    appVer = properties.getProperty("info.app.version", "0.0.1")
}

version = appVer

configurations {
    asciidoctorExt
}

dependencies {

    // spring
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    implementation 'org.springframework.boot:spring-boot-starter'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // spring rest docs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'

    baseDirFollowsSourceFile()

    dependsOn test
}

bootJar {
    dependsOn asciidoctor

    setDuplicatesStrategy(DuplicatesStrategy.EXCLUDE)

    from("${asciidoctor.outputDir}") {
        into 'static/docs'
    }
}

tasks.register('copyDocument', Copy) {
    dependsOn asciidoctor

    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

build {
    dependsOn copyDocument
}